<?xml version="1.0"?>
<!--    https://github.com/squizlabs/PHP_CodeSniffer/wiki/Customisable-Sniff-Properties#genericarraysarrayindent-->
<!--    https://github.com/sirbrillig/phpcs-variable-analysis -->
<!--    https://github.com/slevomat/coding-standard -->
<!--    https://edorian.github.io/php-coding-standard-generator/#phpcs -->
<!--    https://matthewdaly.co.uk/blog/2019/01/13/writing-a-custom-sniff-for-php-codesniffer/ -->
<ruleset name="gym-revenue">
    <!--    <file>./../</file>-->
    <exclude-pattern>*/.quality/*</exclude-pattern>
    <exclude-pattern>*/.husky/*</exclude-pattern>
    <exclude-pattern>*/.github/*</exclude-pattern>
    <exclude-pattern>*/.git/*</exclude-pattern>
    <exclude-pattern>*/tests/*</exclude-pattern>
    <exclude-pattern>*/vendor/*</exclude-pattern>
    <exclude-pattern>*/routes/*</exclude-pattern>
    <exclude-pattern>*/database/migrations/*</exclude-pattern>

    <arg name="extensions" value="php,inc" />
    <arg name="encoding" value="utf-8"/>
    <arg name="colors"/>
    <arg value="sp"/>

    <!-- relative path from PHPCS source location -->
    <config name="installed_paths" value="../vendor/slevomat/coding-standard"/>
    <config name="ignore_errors_on_exit" value="0"/>
    <config name="ignore_warnings_on_exit" value="0"/>
    <config name="show_warnings" value="1"/>
    <config name="report_width" value="200"/>
    <config name="colors" value="true"/>
    <config name="encoding" value="utf-8"/>

    <!-- include all sniffs in the PSR12 standard -->
    <rule ref="PSR12"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Whitespaces/DuplicateSpacesSniff.php">
        <properties>
            <property name="ignoreSpacesBeforeAssignment" value="1"/>
            <property name="ignoreSpacesInAnnotation" value="1"/>
            <property name="ignoreSpacesInComment" value="1"/>
            <property name="ignoreSpacesInMatch" value="1"/>
        </properties>
    </rule>

    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Classes/ClassStructureSniff.php">
        <properties>
            <property name="groups" type="array">
                <element value="uses"/>

                <element value="enum cases"/>

                <!-- Public constants are first but you don't care about the order of protected or private constants -->
                <element value="public constants"/>
                <element value="constants"/>

                <!-- You don't care about the order among the properties. The same can be done with "properties" shortcut -->
                <element value="public properties, protected properties, private properties"/>
                <element value="public static properties, protected static properties, private static properties"/>

                <!-- Constructor is first, then all public methods, then protected/private methods and magic methods are last -->
                <element value="constructor"/>
                <element value="all public methods"/>
                <element value="methods"/>
                <element value="magic methods"/>
            </property>
        </properties>
    </rule>

    <!-- Class -->
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Classes/PropertyDeclarationSniff.php"/>

    <!-- Functions -->
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Functions/UselessParameterDefaultValueSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Functions/UnusedInheritedVariablePassedToClosureSniff.php"/>

    <!-- PHP -->
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/PHP/DisallowDirectMagicInvokeCallSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/PHP/OptimizedFunctionsWithoutUnpackingSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/PHP/ReferenceSpacingSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/PHP/RequireNowdocSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/PHP/ShortListSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/PHP/TypeCastSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/PHP/UselessParenthesesSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/PHP/UselessSemicolonSniff.php"/>
    <rule ref=".quality/Sniffs/SnakeCaseSniff.php"/>


    <!-- Arrays -->
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Arrays/DisallowImplicitArrayCreationSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Arrays/SingleLineArrayWhitespaceSniff.php"/>


    <!-- Variables -->
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Variables/DisallowSuperGlobalVariableSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Variables/DuplicateAssignmentToVariableSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Variables/UnusedVariableSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/Variables/UselessVariableSniff.php"/>


    <!-- TypeHints -->
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/TypeHints/NullableTypeForNullDefaultValueSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/TypeHints/NullTypeHintOnLastPositionSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/TypeHints/ParameterTypeHintSniff.php">
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.UselessAnnotation" />
        <properties>
            <property name="enableNativeTypeHint" value="false" />
            <property name="enableMixedTypeHint" value="false" />
            <property name="enableUnionTypeHint" value="false" />
            <property name="enableIntersectionTypeHint" value="false" />
            <property name="enableStandaloneNullTrueFalseTypeHints" value="false" />
        </properties>
    </rule>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/TypeHints/ParameterTypeHintSpacingSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/TypeHints/PropertyTypeHintSniff.php">
        <properties>
            <property name="enableNativeTypeHint" value="false" />
            <property name="enableMixedTypeHint" value="false" />
            <property name="enableUnionTypeHint" value="false" />
            <property name="enableIntersectionTypeHint" value="false" />
            <property name="enableStandaloneNullTrueFalseTypeHints" value="false" />
        </properties>
    </rule>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/TypeHints/ReturnTypeHintSniff.php">
        <exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.UselessAnnotation" />
        <properties>
            <property name="enableObjectTypeHint" value="false" />
            <property name="enableStaticTypeHint" value="false" />
            <property name="enableMixedTypeHint" value="false" />
            <property name="enableUnionTypeHint" value="false" />
            <property name="enableIntersectionTypeHint" value="false" />
            <property name="enableNeverTypeHint" value="false" />
            <property name="enableStandaloneNullTrueFalseTypeHints" value="false" />
        </properties>
    </rule>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/TypeHints/ReturnTypeHintSpacingSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/TypeHints/UselessConstantTypeHintSniff.php"/>
    <rule ref="vendor/slevomat/coding-standard/SlevomatCodingStandard/Sniffs/TypeHints/DeclareStrictTypesSniff.php">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="2"/>
            <property name="newlinesCountAfterDeclare" value="1"/>
            <property name="spacesCountAroundEqualsSign" value="0"/>
        </properties>
    </rule>

    <rule ref="vendor/sirbrillig/phpcs-variable-analysis/VariableAnalysis/Sniffs/CodeAnalysis/VariableAnalysisSniff.php">
        <properties>
            <property name="ignoreUnusedRegexp" value="/^_/"/>
            <property name="allowUnusedParametersBeforeUsed" value="false"/>
        </properties>
    </rule>
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="lineLimit" value="120" />
            <property name="ignoreComments" value="true" />
        </properties>
    </rule>
    <rule ref="Generic.Formatting.MultipleStatementAlignment" />
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.Arrays.ArrayIndent">
        <exclude name="Generic.Arrays.ArrayIndent.CloseBraceNotNewLine"/><!-- MultiLine items causes evaluation as multiLine array https://github.com/squizlabs/PHP_CodeSniffer/issues/1791 -->
    </rule>
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true" />
        </properties>
    </rule>
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="sizeof" value="count"/>
                <element key="delete" value="unset"/>
                <element key="print" value="echo"/>
                <element key="is_null" value="null"/>
                <element key="create_function" value="null"/>
            </property>
        </properties>
    </rule>
</ruleset>
