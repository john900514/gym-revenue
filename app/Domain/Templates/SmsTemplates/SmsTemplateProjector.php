<?php

declare(strict_types=1);

namespace App\Domain\Templates\SmsTemplates;

use App\Domain\Templates\SmsTemplates\Events\SmsTemplateCreated;
use App\Domain\Templates\SmsTemplates\Events\SmsTemplateDeleted;
use App\Domain\Templates\SmsTemplates\Events\SmsTemplateRestored;
use App\Domain\Templates\SmsTemplates\Events\SmsTemplateTrashed;
use App\Domain\Templates\SmsTemplates\Events\SmsTemplateUpdated;
use App\Domain\Templates\SmsTemplates\Projections\SmsTemplate;
use App\Domain\Users\Models\User;
use Illuminate\Support\Facades\DB;
use Spatie\EventSourcing\EventHandlers\Projectors\Projector;

class SmsTemplateProjector extends Projector
{
    public function onStartingEventReplay()
    {
        SmsTemplate::truncate();
    }

    public function onSmsTemplateCreated(SmsTemplateCreated $event)
    {
        DB::transaction(function () use ($event) {
            $template_data = array_filter($event->payload, function ($key) {
                return in_array($key, (new SmsTemplate())->getFillable());
            }, ARRAY_FILTER_USE_KEY);

            $msg = 'Template was auto-generated';
            if (! $event->autoGenerated()) {
                $user = User::find($event->userId());
                $msg = 'Template was created by ' . $user->name . ' on ' . $event->createdAt()->format('Y-m-d');
            }

            $template_data['created_by_user_id'] = $event->modifiedBy();
            $template_data['active'] = 0;//TODO: do we really need to set template to inactive? prob only campaign

            $template = new SmsTemplate();
            $template->fill($template_data);
            $template->id = $event->aggregateRootUuid();
            $template->client_id = $event->clientId();
            $template->details = ['created' => $msg];
            $template->writeable()->save();
        });
    }

    public function onSmsTemplateUpdated(SmsTemplateUpdated $event)
    {
        DB::transaction(function () use ($event) {
            $template = SmsTemplate::findOrFail($event->aggregateRootUuid());
            $user = User::find($event->userId());
            $msg = 'Template was updated by ' . $user->name . ' on ' . $event->createdAt()->format('Y-m-d');

            $payload = $event->payload;
            $payload['details'] = $template->details ?? [];
            $payload['details']['updated'] = $msg;

            $template->writeable()->updateOrFail($payload);
        });
    }

    public function onSmsTemplateTrashed(SmsTemplateTrashed $event): void
    {
        DB::transaction(function () use ($event) {
            SmsTemplate::withTrashed()->findOrFail($event->aggregateRootUuid())->writeable()->delete();
        });
    }

    public function onSmsTemplateRestored(SmsTemplateRestored $event): void
    {
        DB::transaction(function () use ($event) {
            SmsTemplate::withTrashed()->findOrFail($event->aggregateRootUuid())->writeable()->restore();
        });
    }

    public function onSmsTemplateDeleted(SmsTemplateDeleted $event): void
    {
        DB::transaction(function () use ($event) {
            SmsTemplate::withTrashed()->findOrFail($event->aggregateRootUuid())->writeable()->forceDelete();
        });
    }
}
