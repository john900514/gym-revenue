<?php

namespace App\Models;

use App\Domain\CalendarEvents\CalendarEvent;
use App\Domain\CalendarEventTypes\CalendarEventType;
use GoldSpecDigital\LaravelEloquentUUID\Database\Eloquent\Uuid;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Tasks extends Model
{
    use HasFactory;
    use SoftDeletes;
    use Uuid;

    protected $fillable = ['id', 'user_id', 'due_at', 'completed_at', 'title', 'description', 'created_at', 'updated_at', 'deleted_at'];

    public function scopeFilter($query, array $filters): void
    {
        parent::scopeFilter($query, $filters); // TODO: Change the autogenerated stub
        $query->when($filters['search'] ?? null, function ($query, $search) {
            $query->orWhereHas('title', function ($query) use ($search) {
                $query->where('description', 'like', '%' . $search . '%');
            });
        });
    }

    public function taskId()
    {
        return CalendarEventType::whereClientId($this->client_id)
            ->whereType('Task')
            ->first()
            ->id;
    }

    public function scopeIncomplete($query, array $filters)
    {
        // $filters: 'date' => ...
        // example: App\Domain\Teams\Models\Team
        $query->with('owner')
            ->whereEventTypeId($this->taskId())
            ->whereOwnerId(request()->user()->id)
            ->whereNull('event_completion')
            ->with('type')
            ->get();

        // return CalendarEvent::with('owner')
        //     ->whereEventTypeId($this->taskId())
        //     ->whereOwnerId(request()->user()->id)
        //     ->whereNull('event_completion')
        //     ->with('type')
        //     ->get();
    }

    public function scopeComplete($query, array $filters)
    {
        $query->with('owner')
            ->whereEventTypeId($this->taskId())
            ->whereOwnerId(request()->user()->id)
            ->whereNotNull('event_completion')
            ->with('type')
            ->get();
        // return CalendarEvent::with('owner')
        //     ->whereEventTypeId($this->taskId())
        //     ->whereOwnerId(request()->user()->id)
        //     ->whereNotNull('event_completion')
        //     ->with('type')
        //     ->get();
    }

    public function scopeOverdue($query, array $filters)
    {
        $query->with('owner')
            ->whereEventTypeId($this->taskId())
            ->whereOwnerId(request()->user()->id)
            ->whereNull('event_completion')
            ->whereDate('start', '<', date('Y-m-d H:i:s'))
            ->with('type')
            ->get();
        // return CalendarEvent::with('owner')
        //     ->whereEventTypeId($this->taskId())
        //     ->whereOwnerId(request()->user()->id)
        //     ->whereNull('event_completion')
        //     ->whereDate('start', '<', date('Y-m-d H:i:s'))
        //     ->with('type')
        //     ->get();
    }
}
