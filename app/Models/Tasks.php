<?php

declare(strict_types=1);

namespace App\Models;

use App\Domain\CalendarEventTypes\CalendarEventType;
use GoldSpecDigital\LaravelEloquentUUID\Database\Eloquent\Uuid;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;

class Tasks extends Model
{
    use HasFactory;
    use SoftDeletes;
    use Uuid;

    /** @var array<string> */
    protected $fillable = [
        'id',
        'user_id',
        'due_at',
        'completed_at',
        'title',
        'description',
        'created_at',
        'updated_at',
        'deleted_at',
    ];

    /**
     * @param array<string, mixed> $filters
     *
     */
    public function scopeFilter(Builder $query, array $filters): void
    {
        parent::scopeFilter($query, $filters); // TODO: Change the autogenerated stub
        $query->when($filters['search'] ?? null, function ($query, $search): void {
            $query->orWhereHas('title', function ($query) use ($search): void {
                $query->where('description', 'like', '%' . $search . '%');
            });
        });
    }

    public function taskId(): string
    {
        return CalendarEventType::whereClientId($this->client_id)->whereType('Task')->first()->id;
    }

    /**
     * @param array<string, mixed> $_
     *
     */
    public function scopeIncomplete(Builder $query, array $_): void
    {
        // $filters: 'date' => ...
        // example: App\Domain\Teams\Models\Team
        $query->with('owner')
            ->whereEventTypeId($this->taskId())
            ->whereOwnerId(request()->user()->id)
            ->whereNull('event_completion')
            ->with('type')
            ->get();

        // return CalendarEvent::with('owner')
        //     ->whereEventTypeId($this->taskId())
        //     ->whereOwnerId(request()->user()->id)
        //     ->whereNull('event_completion')
        //     ->with('type')
        //     ->get();
    }

    /**
     * @param array<string, mixed> $_
     *
     */
    public function scopeComplete(Builder $query, array $_): void
    {
        $query->with('owner')
            ->whereEventTypeId($this->taskId())
            ->whereOwnerId(request()->user()->id)
            ->whereNotNull('event_completion')
            ->with('type')
            ->get();
        // return CalendarEvent::with('owner')
        //     ->whereEventTypeId($this->taskId())
        //     ->whereOwnerId(request()->user()->id)
        //     ->whereNotNull('event_completion')
        //     ->with('type')
        //     ->get();
    }

    /**
     * @param array<string, mixed> $_
     *
     */
    public function scopeOverdue(Builder $query, array $_): void
    {
        $query->with('owner')
            ->whereEventTypeId($this->taskId())
            ->whereOwnerId(request()->user()->id)
            ->whereNull('event_completion')
            ->whereDate('start', '<', date('Y-m-d H:i:s'))
            ->with('type')
            ->get();
        // return CalendarEvent::with('owner')
        //     ->whereEventTypeId($this->taskId())
        //     ->whereOwnerId(request()->user()->id)
        //     ->whereNull('event_completion')
        //     ->whereDate('start', '<', date('Y-m-d H:i:s'))
        //     ->with('type')
        //     ->get();
    }
}
