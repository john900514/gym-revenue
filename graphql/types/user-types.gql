"Account of a person who utilizes this application."
type User {
    id: ID!
    name: String!
    first_name: String
    middle_name: String
    last_name: String
    email: String!
    alternate_email: String
    address1: String
    address2: String
    email_verified_at: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    start_date: DateTime
    end_date: DateTime
    termination_date: DateTime
    manager: String
    zip: String
    defaultTeam: Team @hasOne
    roles: [Role] @morphToMany
    phone: String
    city: String
    state: String
    home_location: Location @belongsTo
    teams: [Team] @belongsToMany
    contact_preference: String
    emergency_contact: EmergencyContact
    departments: [Department] @belongsToMany
    positions: [Position] @belongsToMany
    gender: String
    isClientUser: Boolean @method(name: "isClientUser")
    files: [File]! @morphMany
}

type EmergencyContact {
    ec_first_name: String
    ec_last_name: String
    ec_phone: String
}

"Leads"
type Lead{
    id: ID!
    name: String!
    first_name: String
    middle_name: String
    last_name: String
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    #    leadSource: LeadSource @belongsTo
    #    leadType: LeadType @belongsTo
    #    lead_status: LeadStatus
    #    TODO: replace with relationship
    lead_owners: [TeamUser] @method(name: "getTeamUsers")
    owner_user_id: String
    primary_phone: String
    alternate_phone: String
    gender: Boolean
    date_of_birth: DateTime
    #    TODO: need to create projection table to track interaction count + relationships
    interaction_count: InteractionCount! @method(name: "getInteractionCount")
    home_location: Location @belongsTo
    locations: [Location] @belongsToMany
    opportunity: String
    agreement_number: String
    misc: String
    external_id: String
    lead_status_id: String
    owner_user_id: String
    notes: [Note] @hasMany
    gr_location_id: ID
    user_type: String
}


"Lead Sources"
type LeadSource {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

type LeadStatus {
    id: ID!
    status: String
    order: String
    active: Boolean
}

type LeadType {
    id: ID!
    name: String
}


type Member {
    id: ID!
    first_name: String
    last_name: String
    middle_name: String
    email: String
    primary_phone: String
    alternate_phone: String
    gender: String
    date_of_birth: DateTime
    created_at: DateTime
    updated_at: DateTime
    gr_location_id: ID
    interaction_count: InteractionCount @method(name: "getInteractionCount")
    home_location: Location @belongsTo
    locations: [Location] @belongsToMany
    agreement_number: String
    external_id: String
    misc: String
    notes: [Note] @hasMany
}

type ProfileProps {
    user: User
}


"EndUsers"
type EndUser {
    id: ID!
    name: String!
    first_name: String
    middle_name: String
    last_name: String
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    location: Location
    owner_user_id: String
    primary_phone: String
    alternate_phone: String
    gender: Boolean
    date_of_birth: DateTime!
    interaction_count: InteractionCount! @method(name: "getInteractionCount")
    preview_note: [String]! @method(name: "getPreviewNote")
    club_location: Location @method(name: "getClubLocation")
    opportunity: String
    agreement_number: String
    misc: String
    external_id: String
    lead_status_id: String
    owner_user_id: String
    notes: [Note] @hasMany
    gr_location_id: ID
    locations: [Location] @method(name: "getLocations")
}

type Customer {
    id: ID!
    first_name: String
    last_name: String
    middle_name: String
    email: String
    phone: String
    alternate_phone: String
    address1: String
    zip: String
    city: String
    state: String
    gender: String
    date_of_birth: DateTime
    created_at: DateTime!
    updated_at: DateTime!
    gr_location_id: ID
    interaction_count: InteractionCount! @method(name: "getInteractionCount")
    home_location: Location @belongsTo
    locations: [Location] @belongsToMany
    user_type: String
    agreement_number: String
    external_id: String
    misc: String
    notes: [Note] @hasMany
}


#roles bc import issue

type Role {
    id: ID!
    title: String!
    name: String
    created_at: DateTime!
    updated_at: DateTime!
    abilities: [Ability]! @method(name: "abilities")
    availableAbilities: [Ability]! @method(name: "availableAbilities")
    group: Int
}

type Ability {
    id: ID!
    name: String!
    title: String
}

type SecurityGroups {
    value: String
    name: String
}


type ContactPreference {
    id: ID!
    active: Int
    created_at: DateTime
    deleted_at: DateTime
    field: String
    misc: String
    updated_at: DateTime
    user_id: String
    value: String
}
